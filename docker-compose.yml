version: "3.8"
services:
  app:
    build:
      context: .
      target: ${BUILD_TARGET:-main}
    command: fastapi run app/main.py --port 8080 --proxy-headers
    env_file: ${APP_VOLUME_PATH:-.}/.env
    volumes:
      - ${APP_VOLUME_PATH:-/tmp}/app-logs:/code/logs
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -O /dev/null http://localhost:8080 || exit 1"]
      interval: 5s
      timeout: 5s

  worker:
    build:
      context: .
      target: ${BUILD_TARGET:-main}
    command: crond -f
    env_file: ${APP_VOLUME_PATH:-.}/.env
    volumes:
      - ${APP_VOLUME_PATH:-/tmp}/worker-logs:/code/logs
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.80'
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -i crond | grep -wv grep || exit 1"]
      interval: 5s
      timeout: 2s

  redis:
    build:
      context: ./build/redis
    command: sh -c "./init.sh"
    # Run as privileged to allow the container to change the vm.overcommit_memory setting
    privileged: true
    volumes:
      - ${APP_VOLUME_PATH}/redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 2s

  nginx:
    build:
      context: ./build/nginx
    ports:
      - "${APP_PORT}:80"
    depends_on:
      app:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -O /dev/null http://localhost || exit 1"]
      interval: 5s
      timeout: 2s