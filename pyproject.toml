[tool.poetry]
name = "overfast-api"
version = "2.24.0"
description = "Overwatch API giving data about heroes, maps, and players statistics."
license = "MIT"
authors = ["Valentin PORCHET <valentin.porchet@proton.me>"]
readme = "README.md"
homepage = "https://overfast-api.tekrop.fr/"
repository = "https://github.com/TeKrop/overfast-api"
documentation = "https://overfast-api.tekrop.fr/"

[tool.poetry.dependencies]
python = "^3.12"
beautifulsoup4 = "^4.12.2"
fastapi = "^0.109.0"
httpx = {extras = ["http2"], version = "^0.26.0"}
loguru = "^0.7.2"
lxml = "^5.1.0"
redis = "^5.0.1"
uvicorn = {extras = ["standard"], version = "^0.26.0"}
pydantic = "^2.4.2"
pydantic-settings = "^2.0.3"

[tool.poetry.group.dev.dependencies]
fakeredis = "^2.20.0"
ipdb = "^0.13.13"
pytest = "^7.4.3"
pytest-asyncio = "^0.23.3"
pytest-clarity = "^1.0.1"
pytest-cov = "^4.1.0"
pytest-randomly = "^3.15.0"
pytest-xdist = "^3.3.1"
refurb = "^1.22.1"
ruff = "^0.1.3"
pre-commit = "^3.5.0"
sourcery = "^1.11.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "C90",   # mccabe complexity checker
    "I001",  # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "B",     # flake8-bugbear
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "EM",    # flake8-errmsg
    "EXE",   # flake8-executable
    "FIX",   # flake8-fixme
    "FA",    # flake8-future-annotations
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TD",    # flake8-todos
    "TCH",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "ERA",   # eradicate commented-out code
    "PGH",   # pygrep-hooks
    "PL",    # pylint
    "TRY",   # tryceratops
    "FLY",   # flynt
    "PERF",  # perflint
    "RUF",   # ruff-specific rules
]
ignore = [
    # General rules to ignore
    "B008",    # do not perform function calls in argument defaults
    "S101",    # using "assert" is not a security issue
    "S311",    # there is no cryptographic usage of random here
    "RET505",  # allow using else after return statement
    "PLE1205", # error checking doesn't support {} format
    "PLR0913", # allow 6/7 arguments for some functions

    # Rules already handled by ruff formatter
    "E501",    # line too long
    "COM812",  # missing trailing comma
    "COM819",  # prohibited trailing comma
    "ISC001",  # single line implicit string concatenation
    "Q000",    # bad quotes in inline string
    "Q001",    # bad quotes in multiline string
    "Q002",    # bad quotes in docstring
    "Q003",    # avoidable escape quote
    "W191"     # tab indentation detected instead of spaces
]

# Check app code and tests
src = ["app", "tests"]

# Assume Python 3.12
target-version = "py312"

[tool.ruff.isort]
# Consider app as first-party for imports in tests
known-first-party = ["app"]
