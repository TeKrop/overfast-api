# Create connection zone to limit number of connections per IP/domain
limit_conn_zone $http_x_forwarded_for zone=ofconn:10m;
limit_conn_status 429;

# Create request zone to introduce a rate limit per IP
limit_req_zone $http_x_forwarded_for zone=ofreq:10m rate=${RATE_LIMIT_PER_SECOND_PER_IP}r/s;
limit_req_status 429;

upstream appbackend {
  server app:8080;
}

# Use Docker's internal DNS resolver for Lua script
resolver 127.0.0.11 valid=30s;

server_tokens off;

server {
  listen 80;

  # Use nginx to serve static content
  location /static {
    alias /static;
    try_files $uri =404;

    sendfile on;
    tcp_nopush on;

    expires 1d;
    add_header Cache-Control public;
    add_header Access-Control-Allow-Origin "*" always;
  }

  # Favicon
  location /favicon.png {
    alias /static/favicon.png;
  }
  location /favicon.ico {
    alias /static/favicon.ico;
  }

  # Redirect trailing slashes to routes without slashes
  location ~ (?<no_slash>.+)/$ {
    return 301 $scheme://$host$no_slash;
  }

  # Main route
  location / {
    # Rate limiting instructions
    limit_conn ofconn ${MAX_CONNECTIONS_PER_IP};
    limit_req zone=ofreq burst=${RATE_LIMIT_PER_IP_BURST} nodelay;

    # Handle HTTP 429 when triggered by nginx rate limit
    error_page 429 = @limit_reached;

    # Always authorize any origin as it's a public API
    add_header Access-Control-Allow-Origin "*" always;

    # Handle OPTIONS method here
    if ($request_method = OPTIONS) {
      add_header Access-Control-Allow-Origin "*" always;
      add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
      add_header Access-Control-Allow-Headers "*";
      return 204;
    }

    # Use Lua script for Valkey logic
    default_type application/json;
    content_by_lua_block {
      local valkey_handler = require "valkey_handler"
      valkey_handler()
    }

    # Fallback to app if data not in cache
    error_page 404 502 504 = @fallback;
  }

  # FastAPI app fallback
  location @fallback {
    # As we're in fallback, we need to specify the header again
    add_header Access-Control-Allow-Origin "*" always;

    # Main proxy method
    proxy_pass http://appbackend;

    # Ensure headers are forwarded
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_pass_request_headers on;

    # Ensure HEAD requests are passed as GET
    proxy_method GET;
  }

  # nginx rate limit reached
  location @limit_reached {
    add_header Access-Control-Allow-Origin "*" always;
    add_header ${RETRY_AFTER_HEADER} 1 always;

    default_type application/json;
    return 429 '{"error": "API rate limit reached, please wait for 1 second before retrying"}';
  }
}